TOKEN: T_IDENT       LEXEME: x
TOKEN: OP_ASSIGN     LEXEME: <-
TOKEN: T_INTEGER     LEXEME: 1
RULE: Factor ::= T_INTEGER
TOKEN: K_PERIOD      LEXEME: .
RULE: Term ::= Factor
RULE: SimpleExpression ::= Term
RULE: Expression ::= SimpleExpression
RULE: Assignment ::= identifier <- Expression
RULE: Statement ::= Assignment
TOKEN: T_IDENT       LEXEME: y
TOKEN: OP_ASSIGN     LEXEME: <-
TOKEN: T_INTEGER     LEXEME: 2
RULE: Factor ::= T_INTEGER
TOKEN: K_PERIOD      LEXEME: .
RULE: Term ::= Factor
RULE: SimpleExpression ::= Term
RULE: Expression ::= SimpleExpression
RULE: Assignment ::= identifier <- Expression
RULE: Statement ::= Assignment
TOKEN: T_IDENT       LEXEME: c
TOKEN: OP_ASSIGN     LEXEME: <-
TOKEN: T_INTEGER     LEXEME: 3
RULE: Factor ::= T_INTEGER
TOKEN: K_PERIOD      LEXEME: .
RULE: Term ::= Factor
RULE: SimpleExpression ::= Term
RULE: Expression ::= SimpleExpression
RULE: Assignment ::= identifier <- Expression
RULE: Statement ::= Assignment
TOKEN: K_LOOP        LEXEME: LOOP
TOKEN: T_IDENT       LEXEME: c
RULE: Factor ::= T_IDENT
TOKEN: OP_RELATION   LEXEME: <
RULE: Term ::= Factor
RULE: SimpleExpression ::= Term
TOKEN: T_IDENT       LEXEME: n
RULE: Factor ::= T_IDENT
TOKEN: K_COLON       LEXEME: :
RULE: Term ::= Factor
RULE: SimpleExpression ::= Term
RULE: Expression ::= SimpleExpression
RULE: Expression ::= SimpleExpression OP_RELATION Expression
TOKEN: T_IDENT       LEXEME: x
TOKEN: OP_ASSIGN     LEXEME: <-
TOKEN: T_IDENT       LEXEME: x
RULE: Factor ::= T_IDENT
TOKEN: OP_ADD        LEXEME: +
RULE: Term ::= Factor
TOKEN: T_IDENT       LEXEME: y
RULE: Factor ::= T_IDENT
TOKEN: K_PERIOD      LEXEME: .
RULE: Term ::= Factor
RULE: SimpleExpression ::= Term
RULE: SimpleExpression ::= Term OP_ADD SimpleExpression
RULE: Expression ::= SimpleExpression
RULE: Assignment ::= identifier <- Expression
RULE: Statement ::= Assignment
TOKEN: T_IDENT       LEXEME: y
TOKEN: OP_ASSIGN     LEXEME: <-
TOKEN: T_IDENT       LEXEME: x
RULE: Factor ::= T_IDENT
TOKEN: OP_ADD        LEXEME: -
RULE: Term ::= Factor
TOKEN: T_IDENT       LEXEME: y
RULE: Factor ::= T_IDENT
TOKEN: K_PERIOD      LEXEME: .
RULE: Term ::= Factor
RULE: SimpleExpression ::= Term
RULE: SimpleExpression ::= Term OP_ADD SimpleExpression
RULE: Expression ::= SimpleExpression
RULE: Assignment ::= identifier <- Expression
RULE: Statement ::= Assignment
TOKEN: T_IDENT       LEXEME: c
TOKEN: OP_ASSIGN     LEXEME: <-
TOKEN: T_IDENT       LEXEME: c
RULE: Factor ::= T_IDENT
TOKEN: OP_ADD        LEXEME: +
RULE: Term ::= Factor
TOKEN: T_INTEGER     LEXEME: 1
RULE: Factor ::= T_INTEGER
TOKEN: K_SC          LEXEME: ;
RULE: Term ::= Factor
RULE: SimpleExpression ::= Term
RULE: SimpleExpression ::= Term OP_ADD SimpleExpression
RULE: Expression ::= SimpleExpression
RULE: Assignment ::= identifier <- Expression
RULE: Statement ::= Assignment
RULE: StatementSequence ::= Statement
RULE: StatementSequence ::= Statement . StatementSequence
RULE: StatementSequence ::= Statement . StatementSequence
RULE: WhileStatement ::= LOOP Expression : StatementSequence ;
RULE: Statement ::= LoopStatement
TOKEN: K_PERIOD      LEXEME: .
TOKEN: K_PRINT       LEXEME: PRINT
TOKEN: K_LPAREN      LEXEME: (
TOKEN: T_IDENT       LEXEME: x
RULE: Factor ::= T_IDENT
TOKEN: K_RPAREN      LEXEME: )
RULE: Term ::= Factor
RULE: SimpleExpression ::= Term
RULE: Expression ::= SimpleExpression
RULE: PrintStatement ::= PRINT ( Expression )
RULE: Statement ::= PrintStatement
RULE: StatementSequence ::= Statement
RULE: StatementSequence ::= Statement . StatementSequence
RULE: StatementSequence ::= Statement . StatementSequence
RULE: StatementSequence ::= Statement . StatementSequence
RULE: StatementSequence ::= Statement . StatementSequence
CORRECT
